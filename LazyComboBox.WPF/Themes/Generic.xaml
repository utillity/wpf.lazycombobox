<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:controls="clr-namespace:uTILLIty.Controls.WPF.LazyComboBox">

    <SolidColorBrush x:Key="Item.MouseOver.Background" Color="Gold"/>
    <SolidColorBrush x:Key="Item.MouseOver.Border" Color="#a826A0Da"/>
    <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="#3DDADADA"/>
    <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#FFDADADA"/>
    <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="#3D26A0DA"/>
    <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="#FF26A0DA"/>
    <SolidColorBrush x:Key="DarkBlue" Color="#FF191970"/>
    <SolidColorBrush x:Key="TextColor" Color="White"/>

    <Style TargetType="{x:Type controls:LazyComboBox}">
		<Style.Resources>
			<ResourceDictionary>
				<ResourceDictionary.MergedDictionaries>
					<ResourceDictionary
						Source="pack://application:,,,/uTILLIty.Controls.WPF.LazyComboBox;component/Themes/Light.xaml" />
				</ResourceDictionary.MergedDictionaries>
			</ResourceDictionary>
		</Style.Resources>
		<Setter Property="Foreground" Value="{DynamicResource LCB.Foreground}" />
		<Setter Property="Background" Value="{DynamicResource LCB.Background}" />
		<Setter Property="BorderBrush" Value="{DynamicResource LCB.Border}" />
		<Setter Property="BorderThickness" Value="{DynamicResource LCB.BorderThickness}" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="ListStyle">
			<Setter.Value>
				<Style TargetType="{x:Type ListView}">
					<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
					<Setter Property="HorizontalContentAlignment" Value="Stretch" />
					<Setter Property="ItemContainerStyle">
						<Setter.Value>
							<Style TargetType="ListViewItem">
								<Setter Property="HorizontalContentAlignment" Value="Stretch" />

                                <Setter Property="SnapsToDevicePixels" Value="True"/>
                                <Setter Property="Padding" Value="4,1"/>
                               
                                <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="BorderBrush" Value="Transparent"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="IsMouseOver" Value="True"/>
                                                    </MultiTrigger.Conditions>
                                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource DarkBlue}"/>
                                                    <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
                                                    <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{StaticResource TextColor}"/>
                                                </MultiTrigger>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                                        <Condition Property="IsSelected" Value="True"/>
                                                    </MultiTrigger.Conditions>
                                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource DarkBlue}"/>
                                                    <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
                                                    <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{StaticResource TextColor}"/>
                                                </MultiTrigger>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                                        <Condition Property="IsSelected" Value="True"/>
                                                    </MultiTrigger.Conditions>
                                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}"/>
                                                    <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
                                                </MultiTrigger>
                                                <Trigger Property="IsEnabled" Value="False">
                                                    <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
						</Setter.Value>
					</Setter>
					<Setter Property="ItemsPanel">
						<Setter.Value>
							<ItemsPanelTemplate>
								<VirtualizingStackPanel Orientation="Vertical" IsVirtualizing="True" CanHorizontallyScroll="False"
								                        CanVerticallyScroll="True" />
							</ItemsPanelTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="PopupBorderStyle">
			<Setter.Value>
				<Style TargetType="{x:Type Border}">
					<Setter Property="BorderBrush" Value="{DynamicResource LCB.DropDown.Border}" />
					<Setter Property="BorderThickness" Value="{DynamicResource LCB.DropDown.BorderThickness}" />
					<Setter Property="Background" Value="{DynamicResource LCB.DropDown.Background}" />
					<Setter Property="TextBlock.Foreground" Value="{DynamicResource LCB.DropDown.Foreground}" />
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="TextBoxStyle">
			<Setter.Value>
				<Style TargetType="{x:Type TextBox}">
					<Setter Property="BorderThickness" Value="0" />
					<Setter Property="Padding" Value="0,2" />
					<Setter Property="Background" Value="{DynamicResource LCB.Editable.Background}" />
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="DropDownButtonStyle">
			<Setter.Value>
				<Style TargetType="{x:Type ToggleButton}">
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type ToggleButton}">
								<Border x:Name="Border" Background="{DynamicResource LCB.Button.Background}"
								        BorderThickness="1" Margin="0" Padding="0" CornerRadius="{DynamicResource LCB.CornerRadius}"
								        BorderBrush="{DynamicResource LCB.Button.Border}">
									<Path HorizontalAlignment="Center" x:Name="Arrow" VerticalAlignment="Center" Fill="{x:Null}"
									      Data="M0.5,0.5 L3,6.5 5.5,0.5" Stroke="{DynamicResource LCB.Button.Glyph}"
									      Margin="{DynamicResource LCB.Button.Glyph.Margin}"
									      Height="{DynamicResource LCB.Button.Glyph.Height}"
									      Width="{DynamicResource LCB.Button.Glyph.Width}"
									      StrokeThickness="{DynamicResource LCB.Button.Glyph.Thickness}"
									      Stretch="Fill" />
								</Border>
								<ControlTemplate.Triggers>
									<Trigger Property="IsMouseOver" Value="True">
										<Setter TargetName="Arrow" Property="Stroke" Value="{DynamicResource LCB.Button.MouseOver.Glyph}" />
										<Setter TargetName="Border" Property="Background" Value="{DynamicResource LCB.Button.MouseOver.Background}" />
										<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource LCB.Button.MouseOver.Border}" />
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="Focusable" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type controls:LazyComboBox}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="HoverOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
							                               Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="HoverOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
							                               Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="FocusedOn">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Opacity">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="FocusedOff">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Opacity">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
					</ControlTemplate.Resources>
					<Grid>
						<Border x:Name="MainBorder"
						        CornerRadius="{DynamicResource LCB.CornerRadius}"
						        BorderThickness="{TemplateBinding BorderThickness}"
						        Background="{TemplateBinding Background}"
						        BorderBrush="{TemplateBinding BorderBrush}">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<Border x:Name="PART_SelectedItemColumn" Background="Transparent" Padding="2">
									<TextBlock Text="{TemplateBinding SelectedItemText}" />
								</Border>
								<ProgressBar x:Name="ProgressBar" Grid.Column="1" Visibility="Collapsed"
								             Width="{DynamicResource LCB.ProgressBar.Width}"
								             Orientation="Horizontal" IsIndeterminate="{TemplateBinding ListUpdating}" />
								<ToggleButton x:Name="PART_DropDownButton" Grid.Column="2" Focusable="false" ClickMode="Press"
								              Margin="0,-1,-1,-1"
								              IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
								              Style="{TemplateBinding DropDownButtonStyle}" />
								<!--<Border x:Name="PART_DropDownButton" Grid.Column="1" Background="Transparent"
							        Style="{TemplateBinding DropDownButtonStyle}" IsHitTestVisible="True"
							        Width="{TemplateBinding DropDownButtonWidth}">
								<ContentPresenter Style="{TemplateBinding DropDownButtonContentStyle}" />
							</Border>-->
								<TextBox x:Name="PART_TextBox" Grid.Column="0" Visibility="Hidden"
								         Style="{TemplateBinding TextBoxStyle}"
								         Text="{Binding Text, Delay=200, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" />
								<Popup x:Name="PART_Popup" Grid.Column="0" Grid.ColumnSpan="2" Focusable="True"
								       MinWidth="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type Grid}}}"
								       AllowsTransparency="True" StaysOpen="False"
								       Placement="Bottom" MinHeight="60" MaxHeight="200"
								       IsOpen="{TemplateBinding IsDropDownOpen}">
									<Border Style="{TemplateBinding PopupBorderStyle}" CornerRadius="{DynamicResource LCB.CornerRadius}">
										<Grid>
											<Grid.RowDefinitions>
												<RowDefinition Height="*" />
												<RowDefinition Height="Auto" />
											</Grid.RowDefinitions>
											<!-- IsSynchronizedWithCurrentItem="True" - always causes first item in list to be selected -->
											<ListView x:Name="PART_ListView" MaxHeight="200" Background="Transparent"
											          TextBlock.Foreground="{DynamicResource LCB.DropDown.Foreground}"
											          Foreground="{DynamicResource LCB.DropDown.Foreground}"
											          Style="{TemplateBinding ListStyle}"
											          ItemsSource="{TemplateBinding ItemsSource}"
											          IsSynchronizedWithCurrentItem="True"
											          HorizontalContentAlignment="Stretch" 
											          SelectionMode="Single" >
                                                </ListView>
											<ContentPresenter Grid.Row="1" Visibility="{TemplateBinding MoreDataAvailableContentVisibility}"
											                  Content="{TemplateBinding MoreDataAvailableContent}" />
										</Grid>
									</Border>
								</Popup>
							</Grid>
						</Border>
						<Border x:Name="HoverBorder" IsHitTestVisible="False" Opacity="0"
						        CornerRadius="{DynamicResource LCB.CornerRadius}" Background="Transparent"
						        BorderBrush="{StaticResource LCB.MouseOver.Border}" BorderThickness="{TemplateBinding BorderThickness}" />
						<Border x:Name="FocusVisualElement" IsHitTestVisible="False" Opacity="0"
						        CornerRadius="{DynamicResource LCB.CornerRadius}" Background="Transparent"
						        BorderBrush="{StaticResource LCB.Focused.Border}" BorderThickness="{TemplateBinding BorderThickness}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="True">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource FocusedOff}" x:Name="FocusedOff_BeginStoryboard" />
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource FocusedOn}" x:Name="FocusedOn_BeginStoryboard" />
							</Trigger.EnterActions>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True" />
								<Condition Property="IsFocused" Value="False" />
							</MultiTrigger.Conditions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard" />
							</MultiTrigger.ExitActions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource HoverOn}" />
							</MultiTrigger.EnterActions>
						</MultiTrigger>
						<Trigger Property="IsEditable" Value="True">
							<Setter Property="Cursor" TargetName="PART_SelectedItemColumn" Value="IBeam" />
						</Trigger>
						<Trigger Property="ListUpdating" Value="True">
							<Setter TargetName="ProgressBar" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="PART_DropDownButton" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<Trigger Property="IsEditing" Value="True">
							<Setter TargetName="PART_TextBox" Property="Visibility" Value="Visible" />
							<Setter TargetName="PART_SelectedItemColumn" Property="Visibility" Value="Hidden" />
							<Setter TargetName="MainBorder" Property="BorderBrush"
							        Value="{DynamicResource LCB.Editable.Border}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>